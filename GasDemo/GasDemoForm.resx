<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAABARgAAQEaAAEBHgACAikAAgIqAAICMgACAjMAAgI0AAICNgACAjoAAgI7AAICPAADAzoAAwM7AAMD
        QwADA0gAAwNJAAcHQQADA08ABwdGAAMDUAAEBE4ABARYAAQEWQAEBGAABARiAAQEYwAFBXkABgZ6AAUF
        fgAGBoIABgaHAAcHlgAHB5gACwuTAAcHoAAaGnQACwuXAAgIqQAMDKAACAirAAwMogAICK0AEhKYADIy
        TgAICLMACAi0ACEhewAJCbMACQm4AAkJwAAaGpoACQnGAAkJxwAJCcgACQnKAAoKyAAJCcsACgrOAAoK
        zwAKCtEACgrSAAoK0wAKCtQACgrVAAoK1gBOTk4ANDSNAE9PTwBSUlIAOzuUAEJCmgBCQpsAXl5eAEpK
        lABnZ2cAaGhoAGtrawBsbGwAbW1tAGBgmQB6enoAe3t7AH5+fgB/f38Ag4ODAISEhACIiIgAjIyMAI+P
        jwCSkpIAnZ2dAJWVsgCZmbMAoaGhAKOjowCoqLwAtra2ALi4uADFxcUAx8fHAMjIyADMzMwAzs7OANPT
        0wDW1tYA1tbXANfX1wDX19wA3NzcAODg4ADj4+MA5ubmAOvr6wDx8fEA8vLzAPX19gD29vYA/Pz8AP39
        /QD+/v4A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5
        eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cmppaWlpaWlp
        aWlveXl5eXl5eXl5eXl5eXl5eXl5eXZKMC4uLi4uLi4uLjNseXl5eXl5eXl5eXl5eXl5eXl5dSdBQUFB
        QUFBQUFBPV15eXl5eXl5eXl5eXl5eXl5eXl0KUFBQUFBQUFBQUFBXHl5eXl5eXl5eXl5eXl5eXl5eXQp
        QUFBQUFBQUFBQUFceXl5eXl5eXl5eXl5eXl5eXl5dClBQUFBQUFBQUFBQVx5eXl5eXl5eXl5eXl5eXl5
        eXl0KUFBQUFBQUFBQUFBXHl5eXl5eXl5eXl5eXl5eXl5eXQpPzc7NzY6NDc7OUFceXl5eXl5eXl5eXl5
        eXl5eXl5dCISFAUQDh8BGAoNIFx5eXl5eXl5eXl5eXl5eXl5eXl0ERk1Bx4GAxUqHQgeXHl5eXl5eXl5
        eXl5eXl5eXl5eXQTGjEMHBsAISgCFy1ceXl5eXl5eXl5eXl5eXl5eXl5dCUWDwcjNAQ8MgsJJlx5eXl5
        eXl5eXl5eXl5eXl5eXl0KUA8Pj9BPUFBPj5AXHl5eXl5eXl5eXl5eXl5eXl5eXQpQUFBQUFBQUFBQUFc
        eXl5eXl5eXl5eXl5eXl5eXl5dClBQUFBQUFBQUFBQVx5eXl5eXl5eXl5eXl5eXl5eXl0KUFBQUFBQUFB
        QUFBXHl5eXl5eXl5eXl5eXl5eXl5eXQpQUFBQUFBQUFBQUFceXl5eXl5eXl5eXl5eXl5eXl5citBQUFB
        QUFBQUFBOGB5eXl5eXl5eXl5eXl5eXl5eXlXLEdISEMvSEhIRiRQc3l5eXl5eXl5eXl5eXl5eXl5a0xU
        eXl5ZFF5eXlvSXl5eXl5eXl5eXl5eXl5eXl5eXlTTmh5eXllUXl5eW9JeXl5eXl5eXl5eXl5eXl5eXl5
        Z09VeXl5eWVReXl5b0l5eXl5eXl5eXl5eXl5eXl5eXhSS215eXl5Y0VfX19aRHl5eXl5eXl5eXl5eXl5
        eXl3YU5XeXl5eXluWFlZWVlbeXl5eXl5eXl5eXl5eXl5b1ZCTXB5eXl5eXl5eXl5eXl5eXl5eXl5eXl5
        eXl5eWZJTGJ2eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cV5yeXl5eXl5eXl5eXl5eXl5eXl5eXl5
        eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5
        eXl5eXl5eXl5eQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>